trigger:
    branches:
        include:
        -   main
    paths:
        include:
        # Function app
        -   function_app.py
        -   functions/*
        -   host.json
        -   Pipfile

        # Tests
        -   tox.ini
        -   tests/*

        # Devops pipeline
        -   .devops/variables/*
        -   .devops/azure-function-pipeline.yml
        -   .devops/templates/azure-functions/*

variables:
-   name: pythonVersion
    value: 3.9


-   name: functionWorkingDirectory
    value: .

-   name: artifactName
    value: skillsfa

-   name: vmImageName
    value: ubuntu-latest

pool:
    vmImage: ubuntu-latest

stages:
-   stage: Test
    jobs:
    -   job: Test
        steps:
        -   bash: |
                cat > ${{variables.functionWorkingDirectory}}/local.settings.json << EOF
                    {"IsEncrypted": false, "Values": {
                        "sample-key": "sample-value"
                    }}
                EOF
                cat ${{variables.functionWorkingDirectory}}/local.settings.json
            displayName: Testing local.settings.json
        -   template: templates/azure-functions/test-func.yaml
            parameters:
                pythonVersion: ${{ variables.pythonVersion }}
                workingDirectory: ${{variables.functionWorkingDirectory}}

-   stage: Build
    dependsOn: Test
    condition: succeeded()
    jobs:
    -   job: Build
        displayName: Build
        steps:
        -   template: templates/azure-functions/build-func.yaml
            parameters:
                buildId: $(Build.BuildId)
                runtime: python-pipenv
                path: ${{variables.functionWorkingDirectory}}
                artifactName: ${{variables.artifactName}}

-   stage: DeployDev
    dependsOn: Build
    # condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), or(startsWith(variables['Build.SourceBranch'], 'refs/heads/feature'), startsWith(variables['Build.SourceBranch'], 'refs/heads/hotfix')))
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), or(startsWith(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.Reason'], 'Manual')))
    variables:
    -   template: variables/dev-env.yaml
    jobs:
    -   template: templates/azure-functions/deploy-func.yaml
        parameters:
            functionAppName: ${{ variables.faName }}
            buildId: $(Build.BuildId)
            serviceConnection: ${{ variables.azureSubscription}}
            environment: ${{ variables.environment }}
            appSettings: ${{ variables.faSettings }}
            artifactName: ${{variables.artifactName}}
